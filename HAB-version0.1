/*
 HABDuino Tracker
 http://www.habduino.org
 (c) Anthony Stirk M0UPU

 August 2013 Version 1.1

 Credits :

 Interrupt Driven RTTY Code : Evolved from Rob Harrison's RTTY Code.
 Thanks to :  http://www.engblaze.com/microcontroller-tutorial-avr-and-arduino-timer-interrupts/
 http://gammon.com.au/power

 GPS Code from jonsowman and Joey flight computer CUSF
 https://github.com/cuspaceflight/joey-m/tree/master/firmware

 BMP085 library software taken from Adafruit
 LMT2 N&R Calculation code Daniel Richman & Adam Greig :
 From python fractions.Fraction.limit_denominator
 Originally contributed by Sjoerd Mullender.
 Significantly modified by Jeffrey Yasskin <jyasskin at gmail.com>.
 Ported to C by Daniel Richman

 Thanks to :

 Phil Heron
 James Coxon
 Dave Akerman
 Adafruit

 The UKHAS Community http://ukhas.org.uk

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 See <http://www.gnu.org/licenses/>.
 */


char callsign[9] = "HAB55331";  // Change this to what you want to call your HAB - MAX 9 CHARACTERS!!

/*****
Load the required Arduino libraries for the various functions and devices
*****/

#include <util/crc16.h>   //CRC is a way of detecting accidental changes in data storage or transmission
#include <avr/io.h>       //Provides microprocessor specific memory register information probably used with the interrupt routines
#include <avr/interrupt.h>
#include <OneWire.h>      //Library for the Dallas OneWire devices
#include <DallasTemperature.h>    //Library specifically for the Dallas OneWire temperature sensor
#include <SoftwareSerial.h>    //Adds an additional software serial port so the OpenLog can be used
#include <Wire.h>    //Library to allow i2c communication
#include <Adafruit_BMP085.h>    //Library for the BMP085 pressure and temperature sensor credit to Adafruit for the code

/*****
Define certain fixed variables here, this allows for easy alteration
*****/

#define ASCII 7          // ASCII 7 or 8
#define STOPBITS 2       // Either 1 or 2
#define TXDELAY 0        // Delay between sentence TX's
#define RTTY_BAUD 50     // RTTY Baud rate (Recommended = 50)
#define LED_WARN 12
#define LED_OK 13
#define NTX2_SHIFT 425   // sets a PWM analog write value for the NTX2 TX pin for the modulation signal
#define NTX2_OFFSET 0    // 0-100 Slightly adjusts the frequency by increasing the PWM 
#define NTX2_TXD 11
#define NTX2_ENABLE 8    // Used to turn on the radio transmitter only when required using the NTX2 Enable pin high=on low=off
#define GPS_ON 2
#define POWERSAVING
#define ONE_WIRE_BUS 5
#define ONE_SECOND F_CPU / 1024 / 16
#define START_ALT 85    //Altitude at which the baloon is launched used as an offset for the pressure sensor when calculating baloon altitude


OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
Adafruit_BMP085 bmp;  // name the instance of the barometric-temperater sensor
SoftwareSerial openLog(5,4);   //RX, TX

/*****
The Volatile variable qualifier directs the compiler to load the variable from RAM and not from
a storage register, which is a temporary memory location where program variables are stored and
manipulated. Under certain conditions, the value for a variable stored in registers can be inaccurate.
A variable should be declared volatile whenever its value can be changed by something beyond
the control of the code section in which it appears, such as a concurrently executing thread.
In the Arduino, the only place that this is likely to occur is in sections of code associated
with interrupts, called an interrupt service routine.
*****/

volatile int txstatus = 1;
volatile int txstringlength = 0;
volatile char txc;
volatile int txi;
volatile int txj;
volatile int count = 1;
volatile boolean lockvariables = 0;
volatile static byte *_txbuf = 0;
volatile static byte  _txlen = 0;

/*****
Initiate the Error Status Bit Level Field :
 Bit 0 = GPS Error Condition Noted Switch to Max Performance Mode
 Bit 1 = GPS Error Condition Noted Cold Boot GPS
 Bit 2 = Not used in HABduino
 Bit 3 = Current Dynamic Model 0 = Flight 1 = Pedestrian
 Bit 4 = PSM Status 0 = PSM On 1 = PSM Off
 Bit 5 = Lock 0 = GPS Locked 1= Not Locked

 So error 8 means that everything is fine just the GPS is in pedestrian mode.
 Below 1000 meters the code puts the GPS in the more accurate pedestrian mode.
 Above 1000 meters it switches to dynamic model 6 i.e flight mode and turns the LED's off for additional power saving.
 So as an example error code 40 = 101000 means GPS not locked and in pedestrian mode.
*****/

int errorstatus = 0;

/*****
Initiate the global variables for the main loop.
Global variables are available (in scope) to the whole programme
*****/

char txstring[80];
byte buf[60];
byte lock = 0, sats = 0, hour = 0, minute = 0, second = 0;
byte oldhour = 0, oldminute = 0, oldsecond = 0;
int GPSerror = 0, navmode = 0, psm_status = 0, lat_int = 0, lon_int = 0, temperature = 0;
long lat = 0, lon = 0, alt = 0, maxalt = 0, lat_dec = 0, lon_dec = 0 , tslf = 0;
int led_timer = ONE_SECOND;
unsigned long currentMillis;
long previousMillis = 0;
int ledState = LOW;
unsigned long startTime;
char comment[3] = {
  ' ', ' ', '\0'
};
int startPressure = 0, currentPressure = 0, currentAltitude = 0, currentTemperature = 0; //these variables are used by the pressure sensor

/*****
Purpose: Programme Setup only runs once at start
*****/

void setup()  {
  pinMode(NTX2_TXD, OUTPUT);
  pinMode(LED_WARN, OUTPUT);
  pinMode(LED_OK, OUTPUT);
  pinMode(NTX2_ENABLE, OUTPUT);
  pinMode(GPS_ON, OUTPUT);
  blinkled(6);
  Serial.begin(9600);
  while(!Serial){    //wait until serial port connected - this is for the Leonardo board only
    ;
  }
  openLog.begin(57600);    //start the SoftSerial port for fast write - change to 9600 if unreliable
  delay (1000);   //just to give a little time to initialise the softserial port
  
  digitalWrite(NTX2_ENABLE, HIGH);
  blinkled(5);
  digitalWrite(GPS_ON, HIGH);
  blinkled(4);
  resetGPS();
  blinkledOK(4);
  setupGPS();
  blinkledOK(4);
  initialise_interrupt();
#ifdef POWERSAVING
  ADCSRA = 0;
#endif
  //sensors.begin();
  calibrate_BMP085();    //find out the current atmos pressure and use this as sea level
  
}

/*****
Purpose: Main programme loop runs continuously
*****/

void loop()   {
  oldhour = hour;
  oldminute = minute;
  oldsecond = second;
  gps_check_nav();

  if (lock != 3) // Blink LED to indicate no lock
  {
    errorstatus |= (1 << 5);
  }
  else
  {
    errorstatus &= ~(1 << 5);
  }
  checkDynamicModel();

#ifdef POWERSAVING
  if ((lock == 3) && (psm_status == 0) && (sats >= 5) && ((errorstatus & (1 << 0)) == 0) && ((errorstatus & (1 << 1)) == 0))
  {
    setGPS_PowerSaveMode();
    wait(1000);
    pinMode(LED_WARN, INPUT);
    psm_status = 1;
    errorstatus &= ~(1 << 4);
  }
#endif
  if (!lockvariables) {

    prepare_data();
    if (alt > maxalt && sats >= 4)
    {
      maxalt = alt;
    }

    if ((oldhour == hour && oldminute == minute && oldsecond == second) || sats <= 4) {
      tslf++;
    }
    else
    {
      tslf = 0;
      errorstatus &= ~(1 << 0);
      errorstatus &= ~(1 << 1);
    }
  }
}

/*****
Purpose: Calibration of the pressure sensor
Parameters:none
Return value:none
*****/

int calibrate_BMP085()
{
  while (!bmp.begin()) {
    blinkled(2);
    wait (200);
  }
  startPressure = bmp.readPressure();    //reads the current atmospheric pressure at start up
}

/*****
Purpose: Calculate actual altitude
Parameters:none
Return value:int currentAltitude  Height above sea level adjusted for launch site
*****/

int altitudeNow()
{
  currentAltitude = bmp.readAltitude(startPressure) + START_ALT;  //reads the current atmospheric pressure at start up and add start altitude
  return currentAltitude;
}

/*****
Purpose: Function to blink the warning LED a number of times
Parameters:int blink	The number of times to blink the warning LED
Return value:none
*****/

void blinkled(int blinks)
{
  for (int blinkledx = 0; blinkledx <= blinks; blinkledx++) {
    digitalWrite(LED_WARN, HIGH);
    wait(100);
    digitalWrite(LED_WARN, LOW);
    wait(100);
  }
}
void blinkledOK(int blinks)
{
  for (int blinkledx = 0; blinkledx <= blinks; blinkledx++) {
    digitalWrite(LED_OK, HIGH);
    wait(100);
    digitalWrite(LED_OK, LOW);
    wait(100);
  }
}

/*****
Purpose: Function to wait a certain length of time
Parameters:unsigned long 	The delay time required in millis
Return value:none
*****/

void wait(unsigned long delaytime) // Arduino Delay doesn't get CPU Speeds below 8Mhz
{
  unsigned long _delaytime = millis();
  while ((_delaytime + delaytime) >= millis()) {
  }
}


void resetGPS() {
  byte set_reset[] = {
    0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0xFF, 0x87, 0x00, 0x00, 0x94, 0xF5
  };
  sendUBX(set_reset, sizeof(set_reset) / sizeof(byte));
}
void sendUBX(byte *MSG, byte len) {
  Serial.flush();
  Serial.write(0xFF);
  wait(100);
  for (int i = 0; i < len; i++) {
    Serial.write(MSG[i]);
  }
}

/*****
Purpose: Turning off all GPS NMEA strings on the uBlox module
Parameters:none
Return value:none
*****/

void setupGPS() {
  int gps_set_sucess = 0;
  byte setNMEAoff[] = {
    0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x80, 0x25, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xA9
  };
  sendUBX(setNMEAoff, sizeof(setNMEAoff) / sizeof(byte));
  while (!gps_set_sucess)
  {
    sendUBX(setNMEAoff, sizeof(setNMEAoff) / sizeof(byte));
    gps_set_sucess = getUBX_ACK(setNMEAoff);
    if (!gps_set_sucess)
    {
      blinkled(2);
    }

  }

  wait(500);
  setGPS_DynamicModel6();
  wait(500);
  setGps_MaxPerformanceMode();
  wait(500);
}

/*****
Purpose:
Parameters:none
Return value:none
*****/

void setGPS_DynamicModel6()
{
  int gps_set_sucess = 0;
  byte setdm6[] = {
    0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
    0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xDC
  };
  while (!gps_set_sucess)
  {
    sendUBX(setdm6, sizeof(setdm6) / sizeof(byte));
    gps_set_sucess = getUBX_ACK(setdm6);
  }
}

/*****
Purpose:
Parameters:none
Return value:none
*****/

void setGPS_DynamicModel3()
{
  int gps_set_sucess = 0;
  byte setdm3[] = {
    0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x03,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
    0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x76
  };
  while (!gps_set_sucess)
  {
    sendUBX(setdm3, sizeof(setdm3) / sizeof(byte)); //values from the charactewr array are sent to the uBlox
    gps_set_sucess = getUBX_ACK(setdm3);
  }
}

/*****
Purpose: Sets the Ublox module in max performance mode
Parameters:none
Return value:none
*****/

void setGps_MaxPerformanceMode() {
  //Set GPS for Max Performance Mode
  byte setMax[] = {
    0xB5, 0x62, 0x06, 0x11, 0x02, 0x00, 0x08, 0x00, 0x21, 0x91
  }; // Setup for Max Power Mode
  sendUBX(setMax, sizeof(setMax) / sizeof(byte));
}

boolean getUBX_ACK(byte *MSG) {
  byte b;
  byte ackByteID = 0;
  byte ackPacket[10];
  unsigned long startTime = millis();

  // Construct the expected ACK packet
  ackPacket[0] = 0xB5;	// header
  ackPacket[1] = 0x62;	// header
  ackPacket[2] = 0x05;	// class
  ackPacket[3] = 0x01;	// id
  ackPacket[4] = 0x02;	// length
  ackPacket[5] = 0x00;
  ackPacket[6] = MSG[2];	// ACK class
  ackPacket[7] = MSG[3];	// ACK id
  ackPacket[8] = 0;		// CK_A
  ackPacket[9] = 0;		// CK_B

  // Calculate the checksums
  for (byte ubxi = 2; ubxi < 8; ubxi++) {
    ackPacket[8] = ackPacket[8] + ackPacket[ubxi];
    ackPacket[9] = ackPacket[9] + ackPacket[8];
  }

  while (1) {

    // Test for success
    if (ackByteID > 9) {
      // All packets in order!
      return true;
    }

    // Timeout if no valid response in 3 seconds
    if (millis() - startTime > 3000) {
      return false;
    }

    // Make sure data is available to read
    if (Serial.available()) {
      b = Serial.read();

      // Check that bytes arrive in sequence as per expected ACK packet
      if (b == ackPacket[ackByteID]) {
        ackByteID++;
      }
      else {
        ackByteID = 0;	// Reset and look again, invalid order
      }

    }
  }
}
uint16_t gps_CRC16_checksum (char *string)
{
  size_t i;
  uint16_t crc;
  byte c;

  crc = 0xFFFF;

  // Calculate checksum ignoring the first two $s
  for (i = 5; i < strlen(string); i++)
  {
    c = string[i];
    crc = _crc_xmodem_update (crc, c);
  }

  return crc;
}

byte gps_check_nav(void)
{
  byte request[8] = {
    0xB5, 0x62, 0x06, 0x24, 0x00, 0x00, 0x2A, 0x84
  };
  sendUBX(request, 8);

  // Get the message back from the GPS
  gps_get_data();

  // Verify sync and header bytes
  if ( buf[0] != 0xB5 || buf[1] != 0x62 ) {
    GPSerror = 41;
  }
  if ( buf[2] != 0x06 || buf[3] != 0x24 ) {
    GPSerror = 42;
  }
  // Check 40 bytes of message checksum
  if ( !_gps_verify_checksum(&buf[2], 40) ) {
    GPSerror = 43;
  }
  // Return the navigation mode and let the caller analyse it
  navmode = buf[8];
}
void gps_get_data()
{
  Serial.flush();
  // Clear buf[i]
  for (int i = 0; i < 60; i++)
  {
    buf[i] = 0; // clearing buffer
  }
  int i = 0;
  unsigned long startTime = millis();

  while ((i < 60) && ((millis() - startTime) < 1000) ) {
    if (Serial.available()) {
      buf[i] = Serial.read();
      i++;
    }
  }
}
bool _gps_verify_checksum(byte* data, byte len)
{
  byte a, b;
  gps_ubx_checksum(data, len, &a, &b);
  if ( a != *(data + len) || b != *(data + len + 1))
    return false;
  else
    return true;
}
void gps_ubx_checksum(byte* data, byte len, byte* cka,
                      byte* ckb)
{
  *cka = 0;
  *ckb = 0;
  for ( byte i = 0; i < len; i++ )
  {
    *cka += *data;
    *ckb += *cka;
    data++;
  }
}
void checkDynamicModel() {
  if (alt <= 1000 && sats > 4) {
    if (navmode != 3)
    {
      setGPS_DynamicModel3();
      errorstatus |= (1 << 3);
    }
  }
  else
  {
    if (navmode != 6) {
      setGPS_DynamicModel6();
      errorstatus &= ~(1 << 3);

    }
  }
}
void setGPS_PowerSaveMode() {
  // Power Save Mode
  byte setPSM[] = {
    0xB5, 0x62, 0x06, 0x11, 0x02, 0x00, 0x08, 0x01, 0x22, 0x92
  }; // Setup for Power Save Mode (Default Cyclic 1s)
  sendUBX(setPSM, sizeof(setPSM) / sizeof(byte));
}

/*****
Purpose: Checks to see if the GPS has got a satellite lock
Parameters:none
Return value:none  No value is returned by sets reporting flags
*****/

void gps_check_lock()
{
  GPSerror = 0;
  Serial.flush();
  // Construct the request to the GPS
  byte request[8] = {
    0xB5, 0x62, 0x01, 0x06, 0x00, 0x00,
    0x07, 0x16
  };
  sendUBX(request, 8);

  // Get the message back from the GPS
  gps_get_data();
  // Verify the sync and header bits
  if ( buf[0] != 0xB5 || buf[1] != 0x62 ) {
    GPSerror = 11;
  }
  if ( buf[2] != 0x01 || buf[3] != 0x06 ) {
    GPSerror = 12;
  }

  // Check 60 bytes minus SYNC and CHECKSUM (4 bytes)
  if ( !_gps_verify_checksum(&buf[2], 56) ) {
    GPSerror = 13;
  }

  if (GPSerror == 0) {
    // Return the value if GPSfixOK is set in 'flags'
    if ( buf[17] & 0x01 )
      lock = buf[16];
    else
      lock = 0;

    sats = buf[53];
  }
  else {
    lock = 0;
  }
}

/*****
Purpose: Requests and receives the positional data from the GPS
Parameters:none
Return value: long lon, long lat, long alt            Global variables for longditude, lattitude and altitude
*****/

void gps_get_position()
{
  GPSerror = 0;
  Serial.flush();
  // Request a NAV-POSLLH message from the GPS
  byte request[8] = {
    0xB5, 0x62, 0x01, 0x02, 0x00, 0x00, 0x03,
    0x0A
  };
  sendUBX(request, 8);

  // Get the message back from the GPS
  gps_get_data();

  // Verify the sync and header bits
  if ( buf[0] != 0xB5 || buf[1] != 0x62 )
    GPSerror = 21;
  if ( buf[2] != 0x01 || buf[3] != 0x02 )
    GPSerror = 22;

  if ( !_gps_verify_checksum(&buf[2], 32) ) {
    GPSerror = 23;
  }

  if (GPSerror == 0) {
    if (sats < 4)
    {
      lat = 0;
      lon = 0;
      alt = 0;
    }
    else
    {
      lon = (long)buf[10] | (long)buf[11] << 8 |
            (long)buf[12] << 16 | (long)buf[13] << 24;
      lat = (long)buf[14] | (long)buf[15] << 8 |
            (long)buf[16] << 16 | (long)buf[17] << 24;
      alt = (long)buf[22] | (long)buf[23] << 8 |
            (long)buf[24] << 16 | (long)buf[25] << 24;
    }
    // 4 bytes of latitude/longitude (1e-7)
    lon_int = abs(lon / 10000000);
    lon_dec = (labs(lon) % 10000000) / 10;
    lat_int = abs(lat / 10000000);
    lat_dec = (labs(lat) % 10000000) / 10;
    // 4 bytes of altitude above MSL (mm)
    alt /= 1000; // Correct to meters
  }
}

/*****
Purpose: Requests and receives the time data from the GPS
Parameters:none
Return value: byte hour, byte minute, byte second            Global variables for hour, minute and second
*****/

void gps_get_time()
{
  GPSerror = 0;
  Serial.flush();
  // Send a NAV-TIMEUTC message to the receiver
  byte request[8] = {
    0xB5, 0x62, 0x01, 0x21, 0x00, 0x00,
    0x22, 0x67
  };
  sendUBX(request, 8);

  // Get the message back from the GPS
  gps_get_data();

  // Verify the sync and header bits
  if ( buf[0] != 0xB5 || buf[1] != 0x62 )
    GPSerror = 31;
  if ( buf[2] != 0x01 || buf[3] != 0x21 )
    GPSerror = 32;
    
  if ( !_gps_verify_checksum(&buf[2], 24) ) {
    GPSerror = 33;
  }
  
  if (GPSerror == 0) {
    if (buf[22] > 23 || buf[23] > 59 || buf[24] > 59)
    {
      GPSerror = 34;
    }
    else {
      hour = buf[22];
      minute = buf[23];
      second = buf[24];
    }
  }
}


/*****
Purpose: Checks to see if the GPS has got a satellite lock
Parameters:none
Return value:none  No value is returned but sets some global variables for longditude, lattitude and altitude
*****/

void initialise_interrupt()
{
  // initialize Timer1
  cli();          // disable global interrupts
  TCCR1A = 0;     // set entire TCCR1A register to 0
  TCCR1B = 0;     // same for TCCR1B
  OCR1A = F_CPU / 1024 / RTTY_BAUD - 1;  // set compare match register to desired timer count:
  TCCR1B |= (1 << WGM12);   // turn on CTC mode:
  // Set CS10 and CS12 bits for:
  TCCR1B |= (1 << CS10);
  TCCR1B |= (1 << CS12);
  // enable timer compare interrupt:
  TIMSK1 |= (1 << OCIE1A);
  sei();          // enable global interrupts
}


/*****
Purpose: This is the interrupt routine which concats the data into a string,
individual characters are then sent one at a time to the transmitter
Parameters:none
Return value: none
*****/

ISR(TIMER1_COMPA_vect)
{

  if (alt > 1000 && sats >= 4)
  {
    digitalWrite(LED_WARN, LOW);
    digitalWrite(LED_OK, LOW);
  }
  else
  {
    currentMillis = millis();
    if (currentMillis - previousMillis > led_timer) {
      previousMillis = currentMillis;

      if (errorstatus == 8)
      {
        digitalWrite(LED_OK, !digitalRead(LED_OK));
        digitalWrite(LED_WARN, LOW);
      }
      else
      {

        digitalWrite(LED_WARN, !digitalRead(LED_WARN));
        digitalWrite(LED_OK, !digitalRead(LED_WARN));
      }
    }
  }

  switch (txstatus) {
    case 0: // This is the optional delay between transmissions.
      txj++;
      if (txj > (TXDELAY * RTTY_BAUD)) {
        txj = 0;
        txstatus = 1;
      }
      break;
    case 1: // Initialise transmission
      if (alt > maxalt && sats >= 4)
      {
        maxalt = alt;
      }
      lockvariables = 1;
      sprintf(txstring, "$$$$$%s,%i,%02d:%02d:%02d,%s%i.%06ld,%s%i.%06ld,%ld,%d,%i,%i", callsign, count, hour, minute,
              second, lat < 0 ? "-" : "", lat_int, lat_dec, lon < 0 ? "-" : "", lon_int, lon_dec, maxalt, sats, errorstatus, currentTemperature);
      sprintf(txstring, "%s*%04X\n", txstring, gps_CRC16_checksum(txstring));
      maxalt = 0;
      lockvariables = 0;
      txstringlength = strlen(txstring);
      txstatus = 2;
      txj = 0;
      openLog.println(txstring);    //this should write the data string to the openLog SD card, one line for each entry
      openLog.println(currentPressure, currentAltitude);
      break;

    case 2: // Grab a char and lets go transmit it.
      if ( txj < txstringlength)
      {
        txc = txstring[txj];
        txj++;
        txstatus = 3;
        rtty_txbit (0); // Start Bit;
        txi = 0;
      }
      else
      {
        txstatus = 0; // Should be finished
        txj = 0;
        count++;
      }
      break;
    case 3:
      if (txi < ASCII)
      {
        txi++;
        if (txc & 1) rtty_txbit(1);
        else rtty_txbit(0);
        txc = txc >> 1;
        break;
      }
      else
      {
        rtty_txbit (1); // Stop Bit
        txstatus = 4;
        txi = 0;
        break;
      }
    case 4:
      if (STOPBITS == 2)
      {
        rtty_txbit (1); // Stop Bit
        txstatus = 2;
        break;
      }
      else
      {
        txstatus = 2;
        break;
      }
  }
}

/*****
Purpose: To send HIGH=1 and LOW=0 values to the transmitter providing signal modulation
Parameters:int bit    A value of 1=HIGH a value 0=LOW
Return value: none
*****/

void rtty_txbit (int bit)
{
  if (bit)
  {
    //  int shift = NTX2_SHIFT;
    // analogWrite(NTX2_TXD, NTX2_OFFSET+(NTX2_SHIFT/26.5)); // High
    digitalWrite(NTX2_TXD, HIGH);
  }
  else
  {
    // analogWrite(NTX2_TXD, NTX2_OFFSET); // Low
    digitalWrite(NTX2_TXD, LOW);
  }
}


/*****
Purpose: To obtain and set variuos global variables using other functions
Parameters: none
Return value: Sets various global variables for use in other functions
*****/


void prepare_data() {
// The following two lines of code are used with the DallasOneWire Temperature Sensor only  
// sensors.requestTemperatures();
//  temperature = sensors.getTempCByIndex(0);
  currentTemperature = bmp.readTemperature(); // obtain temperature from the BMP085 sensor
  altitudeNow();  //sets the currentAltitude variable
  currentPressure = bmp.readPressure();
  gps_check_lock();
  gps_get_position();
  gps_get_time();
}
